use once_cell::sync::Lazy;
use std::error::Error;
use std::sync::{Arc, Mutex, OnceLock};
use uuid::Uuid;

use crate::commands::ChartingData;
use crate::{
    library::providers::downloader::OHLCVJSONFileDataStructure,
    user::static_resources::IStaticResource,
};

pub struct Mastercard {
    id: String,
    name: String,
    load_path: String,
}

impl IStaticResource<OHLCVJSONFileDataStructure> for Mastercard {
    fn id(&self) -> &str {
        return &self.id;
    }

    fn name(&self) -> &str {
        return &self.name;
    }

    fn load_path(&self) -> &str {
        return &self.load_path;
    }

    fn data_type(&self) -> &str {
        return "OHLCV";
    }

    fn load(&self) -> Result<OHLCVJSONFileDataStructure, Box<dyn Error>> {
        let file_data_string = std::fs::read_to_string(&format!("{}{}", &self.load_path, ".json"))
            .expect("Couldn't load load_path");
        let data = serde_json::from_str::<OHLCVJSONFileDataStructure>(&file_data_string)
            .expect("Couldn't deserialize load_path data");

        Ok(data)
    }

    fn render(&self) -> Option<Vec<ChartingData>> {
        let charting_data: Vec<ChartingData> = vec![];

        return Some(charting_data);
    }
}

impl Mastercard {
    pub fn instance() -> &'static Mastercard {
        static INSTANCE: OnceLock<Mastercard> = OnceLock::new();
        return INSTANCE.get_or_init(|| Mastercard::new());
    }

    pub fn new() -> Self {
        return Self {
            id: Uuid::new_v4().into(),
            name: "Mastercard".into(),
            //TODO: make app_resource(...) function to automaticaly get C:/.../com.algorithmicplus.app
            load_path: "C:/Users/pc/AppData/Roaming/com.algorithmicplus.app/raw/ohlcv/3dfddbfd-be05-4e14-8c4f-ee8f5db4298c".into(),
        };
    }
}
